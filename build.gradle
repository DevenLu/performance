// Top-level build file where you can add configuration options common to all sub-projects/modules.
println("=" * 100)
apply from: 'config.gradle'

buildscript {

  ext.properties_file_path = "${rootProject.getProjectDir()}${File.separator}gradle.properties"
  Properties properties = new Properties()
  properties.load(file(properties_file_path).newDataInputStream())
  ext.mode_composing = properties.getProperty("mode.composing", "false").toBoolean()

  ext.kotlin_version = '1.4.20'
  ext.lib_publish_version = "0.1.6"
  ext.lib_version = "0.1.6"

  ext.use_local_lib = false

  ext.local_repo_path = rootProject.file("./repos").absolutePath
  println("local repo path:$local_repo_path")
  ext.local_plugin_exit = file("${local_repo_path}/com/xander/performance/performance/maven-metadata.xml").exists()
  ext.plugin_artifact_id = mode_composing ? "local-plugin" : "performance"
  ext.plugin_version = mode_composing ? "1.0" : rootProject.ext.lib_version
  ext.plugin_classpath = "com.xander.performance:${plugin_artifact_id}:${plugin_version}"
  ext.plugin_apply_name = "com.xander.performance.${mode_composing ? "plugin" : "performance"}"

  ext.use_plugin = mode_composing ? true : local_plugin_exit
  //ext.use_plugin = false
  println("use plugin:${use_plugin}")
  if (use_plugin) {
    println("plugin classpath:${plugin_classpath}")
    println("plugin apply name:${plugin_apply_name}")
  }

  repositories {
    maven { url uri("${local_repo_path}") }
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://maven.aliyun.com/repository/google" }
    jcenter()
    google()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.6.4'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
    classpath 'com.novoda:bintray-release:0.9.2'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    if (rootProject.ext.use_plugin) {
      classpath "${plugin_classpath}"
    }
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
  }
}

allprojects {

  // 这两个任务在上传的时候报错，先关闭
  tasks.getByPath(":tool:javadocRelease").enabled = false
  tasks.getByPath(":tool-noop:javadocRelease").enabled = false
  tasks.getByPath(":lib-epic:javadocRelease").enabled = false

  repositories {
    maven { url uri("${local_repo_path}") }
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://maven.aliyun.com/repository/google" }
    jcenter()
    google()
    mavenCentral()
  }

  // add dependency substitution rules
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      // Substitute project and module dependencies
      // 远程的 lib 依赖变成本地的依赖
      if (use_local_lib) {
        substitute module('com.xander.performance:p-tool') with project(':tool')
        substitute module('me.weishu.epic:epic-xander') with project(':lib-epic')
      }
      // Substitute one module dependency for another
      // 修改某个依赖的版本
      //substitute module('org.gradle:api:2.0') with module('org.gradle:api:2.1')
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
